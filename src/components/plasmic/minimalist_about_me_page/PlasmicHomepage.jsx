// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dB9fKmCugZrew5tYn7pwCP
// Component: aS3GfOA7y05JK
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CopyableLink from "../../CopyableLink"; // plasmic-import: rOODi4RGgXYkp/component
import SocialIcon from "../../SocialIcon"; // plasmic-import: whvqZ5d5c4inL/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 5n3Kke2rCR0zj/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: dB9fKmCugZrew5tYn7pwCP/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: aS3GfOA7y05JK/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: WLCxGIL5wTI0D/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: MrFuWB-ryKA_9/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: zEhlKX5e3VodS/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.box__wlTl)}>
            <div className={classNames(defaultcss.all, sty.box__ckEez)} />

            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "tabletOrSmaller")
                  ? true
                  : false
              }
              className={classNames(defaultcss.all, sty.box__mk86K)}
            >
              <div className={classNames(defaultcss.all, sty.box___8BnQ7)}>
                <div className={classNames(defaultcss.all, sty.box__cVtVf)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__vuZV
                    )}
                  >
                    {"Anna Wu"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__imLMx
                    )}
                  >
                    {
                      "Building things for building things.\nDesign and code at Plasmic."
                    }
                  </div>
                </div>
              </div>

              <div className={classNames(defaultcss.all, sty.box___0PnWr)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__f0XYg
                  )}
                >
                  {" "}
                </div>

                <div className={classNames(defaultcss.all, sty.box__zfSe2)}>
                  <CopyableLink
                    data-plasmic-name={"copyableLink"}
                    data-plasmic-override={overrides.copyableLink}
                    className={classNames("__wab_instance", sty.copyableLink)}
                  >
                    {"aw@gmail.com"}
                  </CopyableLink>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__iaeap)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__dyFr7)}
                  >
                    <SocialIcon
                      className={classNames(
                        "__wab_instance",
                        sty.socialIcon__ak7K
                      )}
                    >
                      <IconIcon
                        className={classNames(defaultcss.all, sty.svg__iSoMd)}
                        role={"img"}
                      />
                    </SocialIcon>

                    <SocialIcon
                      className={classNames(
                        "__wab_instance",
                        sty.socialIcon__fH6Tn
                      )}
                    >
                      <Icon2Icon
                        className={classNames(defaultcss.all, sty.svg__gDxl7)}
                        role={"img"}
                      />
                    </SocialIcon>

                    <SocialIcon
                      className={classNames(
                        "__wab_instance",
                        sty.socialIcon___0UaTg
                      )}
                    >
                      <Icon3Icon
                        className={classNames(defaultcss.all, sty.svg__rERlN)}
                        role={"img"}
                      />
                    </SocialIcon>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>

            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                defaultcss.button,
                defaultcss.__wab_text,
                sty.button
              )}
            >
              {"Click Me"}
            </button>

            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox)}
              placeholder={"Some placeholder"}
              size={1}
              type={"text"}
              value={"Some value"}
            />

            <div className={classNames(defaultcss.all, sty.box__x9LRb)} />
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "copyableLink", "button", "textbox"],
  copyableLink: ["copyableLink"],
  button: ["button"],
  textbox: ["textbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    copyableLink: makeNodeComponent("copyableLink"),
    button: makeNodeComponent("button"),
    textbox: makeNodeComponent("textbox"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
