// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dB9fKmCugZrew5tYn7pwCP
// Component: whvqZ5d5c4inL
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_minimalist_about_me_page.module.css"; // plasmic-import: dB9fKmCugZrew5tYn7pwCP/projectcss
import * as sty from "./PlasmicSocialIcon.module.css"; // plasmic-import: whvqZ5d5c4inL/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: WLCxGIL5wTI0D/icon

export const PlasmicSocialIcon__VariantProps = new Array();

export const PlasmicSocialIcon__ArgProps = new Array("children");

function PlasmicSocialIcon__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <a
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      href={"/"}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <IconIcon
            className={classNames(defaultcss.all, sty.svg__lgXwa)}
            role={"img"}
          />
        ),

        value: args.children
      })}
    </a>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSocialIcon__ArgProps,
      internalVariantPropNames: PlasmicSocialIcon__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSocialIcon__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialIcon";
  } else {
    func.displayName = `PlasmicSocialIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialIcon = Object.assign(
  // Top-level PlasmicSocialIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSocialIcon
    internalVariantProps: PlasmicSocialIcon__VariantProps,
    internalArgProps: PlasmicSocialIcon__ArgProps
  }
);

export default PlasmicSocialIcon;
/* prettier-ignore-end */
